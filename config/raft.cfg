# print a detachable raft - I found the ones in slicers were up to snuff
# this requires that [exclude_object] is defined in printer.cfg, and your slicer is labeling objects.
[gcode_arcs]

[gcode_macro _RAFT_Settings]
description: This macro contains all adjustable settings for RAFT 
variable_raft_enable: False
variable_raft_brim: 2
variable_raft_layer_gap: 0.25

variable_raft_layer_1_feedrate: 2000
variable_raft_layer_2_feedrate: 5000
variable_raft_accel: 1000

# variable_height
# variable_width
# variable_feedrate

# a whole raft of other things are possible like the speeds, extrusion width, pattern...

gcode: # Gcode section left intentionally blank. Do not disturb.
    {action_respond_info(" Running the _RAFT_Settings macro does nothing, it is only used for storing RAFT settings. ")}


[gcode_macro _raft]
description: This macro prints a detachable raft, which endeavors to smooth out bed variances

gcode: 
  {action_respond_info(" Building a raft.")}
  {% set raft_settings = printer["gcode_macro _RAFT_Settings"] %}
  {% set all_objects = printer.exclude_object.objects %}  
  {% set move = printer.gcode_move %}
  {% set position = printer.toolhead.position %}

  {% if position.x == 0 and position.y == 0 and position.z == 0 %}
    G28
  {% endif %}

  G90
  G92 E0.0
  SET_VELOCITY_LIMIT ACCEL={raft_settings.raft_accel}

  # {% set z_height = raft_settings.raft_nozzle_size * 0.8 %}
  # {% set z_height = 0 %}
  {% for layers in [[0.32, 0.64, "x", 5, raft_settings.raft_layer_1_feedrate, 0], [0.12, 0.42, "y", 4, raft_settings.raft_layer_2_feedrate, 255]] %}
    {% set layer_height = layers[0] %}
    {% set layer_width = layers[1] %}
    {% set layer_dir = layers[2] %}
    {% set layer_sep = layers[3] %}
    {% set print_speed = layers[4] %}
    {% set fan_speed = layers[5] %}
    SET_GCODE_OFFSET Z_ADJUST={layer_height}
    M106 S{fan_speed}

    { action_respond_info( "height {}, width {}, dir {}, sep {}.".format(layer_height, layer_width, layer_dir, layer_sep)) }

    {% for row in all_objects %} 
      {% set x_min = (row.polygon | map(attribute=0) | min) - raft_settings.raft_brim %} # Set x_min from smallest object x point
      {% set y_min = (row.polygon | map(attribute=1) | min) - raft_settings.raft_brim %} # Set y_min from smallest object y point
      {% set x_max = (row.polygon | map(attribute=0) | max) + raft_settings.raft_brim %} # Set x_max from largest object x point
      {% set y_max = (row.polygon | map(attribute=1) | max) + raft_settings.raft_brim %}    

      # z-hop rapid
      G10 # retract
      
      G0 Z1 F{move.speed * 60}
      G0 X{x_min} Y{y_min} F{move.speed * 60}
      G11 # de-retract

      G0 Z0 F{move.speed * 60}

      {% if layer_dir == "x" %} 
        {% set iterations = ((x_max - x_min) / (layer_width * layer_sep)) | int  %}
        # { action_respond_info( "iterations: {}.".format((iterations),)) }

        {% for i in range(iterations + 1) %}
          {% set x = x_min + (layer_width * layer_sep * i)  %}

          # { action_respond_info( "x: {}.".format((x),)) }
          DRAW_LINE_TO X={x} Y={y_max} HEIGHT={layer_height} WIDTH={layer_height * 2} FEEDRATE={print_speed} 
          DRAW_LINE_TO X={x + layer_width * (layer_sep /2)} Y={y_max} HEIGHT={layer_height} WIDTH={layer_width} FEEDRATE={print_speed}  
          DRAW_LINE_TO X={x + layer_width * (layer_sep /2)} Y={y_min} HEIGHT={layer_height} WIDTH={layer_width} FEEDRATE={print_speed}  
          DRAW_LINE_TO X={x + layer_width * layer_sep} Y={y_min} HEIGHT={layer_height} WIDTH={layer_width} FEEDRATE={print_speed}  
        {% endfor %}
      {% endif %}

      {% if layer_dir == "y" %} 
        {% set iterations = ((y_max - y_min) / (layer_width * layer_sep)) | int  %}
        # { action_respond_info( "iterations: {}.".format((iterations),)) }

        {% for i in range(iterations + 1) %}
          {% set y = y_min + (layer_width * layer_sep * i)  %}

          # { action_respond_info( "x: {}.".format((x),)) }
          DRAW_LINE_TO X={x_min} Y={y} HEIGHT={layer_height} WIDTH={layer_height * 2} FEEDRATE={print_speed}  
          DRAW_LINE_TO X={x_min} Y={y + layer_width * (layer_sep /2)} HEIGHT={layer_height} WIDTH={layer_width} FEEDRATE={print_speed}  
          DRAW_LINE_TO X={x_max} Y={y + layer_width * (layer_sep /2)} HEIGHT={layer_height} WIDTH={layer_width} FEEDRATE={print_speed}  
          DRAW_LINE_TO X={x_max} Y={y + layer_width * layer_sep} HEIGHT={layer_height} WIDTH={layer_width} FEEDRATE={print_speed}  
        {% endfor %}
      {% endif %}

    {% endfor %}
  {% endfor %}
      
  
  G1 Z2 F{move.speed * 60}
  SET_GCODE_OFFSET Z_ADJUST={raft_settings.raft_layer_gap}
  # SET_GCODE_OFFSET Z={z_height + 0.25}
  SET_VELOCITY_LIMIT ACCEL=8000

  # PAUSE

  M106 S255 # full fan

    
                                               # Set y_max from largest object y point



[gcode_macro raft]
description: This macro prints a detachable raft, which endeavors to smooth out bed variances

gcode: 
    {% set raft_settings = printer["gcode_macro _RAFT_Settings"] %}

    {% if raft_settings.raft_enable == True  %} # and all_objects has something
        _raft
    {% endif %}

[gcode_macro draw_line_to]
description: Extrudes a line of filament at the specified height and width from
  the current coordinate to the supplied XY coordinate. (The height is used only
  to calculate the extrusion volume.)
  Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
                      [FEEDRATE=<mm/m>]
gcode:
#   {% set dparams = printer["gcode_macro set_draw_params"] %}
  {% set position = printer.gcode_move.gcode_position %}
  {% set X = params.X|default(position.x)|float %}
  {% set Y = params.Y|default(position.y)|float %}
  {% set HEIGHT = params.HEIGHT|float %}
  {% set WIDTH = params.WIDTH|float %}
  {% set FEEDRATE = params.FEEDRATE|int %}

  # { action_respond_info( "printing line: {}.".format((params),)) }

  {% set x_distance = X - position.x %}
  {% set y_distance = Y - position.y %}
  {% set distance = ((x_distance * x_distance) + (y_distance * y_distance)) ** 0.5 %}

  {% set filament_area = 3.14159 * (1.75 * 0.5 ** 2) %}
      #  (printer.configfile.settings[
      #     printer.toolhead.extruder].filament_diameter ** 2) / 4 %}


  # { action_respond_info( "filament_area: {}, distance {} width {} height {}.".format(filament_area, distance, WIDTH, HEIGHT)) }

  {% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}

  G92 E0.0

  # Use the base state call here so offset adjustments get persisted.
#   _KM_SAVE_GCODE_STATE NAME=_KM_PURGE
  G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
  # G0 X{"%.3f" % X} Y{"%.3f" % Y} F{FEEDRATE}
#   _KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0    
  # { action_respond_info( "done line {} {} {} ".format(X, Y, E)) }
